<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>新起点</title>
  
  <subtitle>有志始知蓬莱近，无为总觉咫尺远</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.theclouds.top/"/>
  <updated>2017-06-10T02:37:11.000Z</updated>
  <id>https://blog.theclouds.top/</id>
  
  <author>
    <name>zhengyanbin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用antisamy防止xss注入</title>
    <link href="https://blog.theclouds.top/articles/prevent-xss-with-antisamy-in-java/"/>
    <id>https://blog.theclouds.top/articles/prevent-xss-with-antisamy-in-java/</id>
    <published>2017-06-10T02:37:11.000Z</published>
    <updated>2017-06-10T02:37:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java中处理xss的方式有多种，一般使用html entity转义，校验输入，清理有危害代码片段等方法。</p><ul><li>转义字符串长度会发生变化，可能影响到持久化操作。如果页面中不允许编辑富文本，可以采用此方式；相反，这种方式会影响html展示。</li><li>校验输入可以在数据提交前防止用户添加特殊字符，但不是主要防御方法，只是有助于减少xss漏洞。</li><li>清理是一种强有力的防御措施，清除可能有害的标记，将不可接受的用户输入更改为可接受的格式，以确保接收到的数据不会对用户以及数据库造成损害。在允许使用html的站点上，这种方式效果较好。</li></ul><a id="more"></a><p>实际处理中，一般采用以上几种方式组合使用，但仍不能涵盖所有xss攻击，安全测试必不可少！<br>下面就清理有害代码的来做一次实践，利用了antisamy来完成有害代码的清理，jsoup等其他工具也可以做到。</p><ol><li><p>添加maven依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.owasp.antisamy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>antisamy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>根据antisamy api编写相关工具类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.owasp.esapi.ESAPI;</span><br><span class="line"><span class="keyword">import</span> org.owasp.validator.html.AntiSamy;</span><br><span class="line"><span class="keyword">import</span> org.owasp.validator.html.CleanResults;</span><br><span class="line"><span class="keyword">import</span> org.owasp.validator.html.Policy;</span><br><span class="line"><span class="keyword">import</span> org.owasp.validator.html.PolicyException;</span><br><span class="line"><span class="keyword">import</span> org.owasp.validator.html.ScanException;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.DefaultResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(XssUtils.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Policy policy = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>&#123; </span><br><span class="line">ResourceLoader resourceLoader = <span class="keyword">new</span> DefaultResourceLoader();</span><br><span class="line"><span class="comment">//加载规则文件，antisamy提供了多份文件供参考</span></span><br><span class="line">Resource resource = resourceLoader.getResource(<span class="string">"classpath:/antisamy.xml"</span>); </span><br><span class="line"> <span class="keyword">try</span> &#123; </span><br><span class="line">policy = Policy.getInstance(resource.getURL().getPath()); </span><br><span class="line">&#125; <span class="keyword">catch</span> (PolicyException e) &#123; </span><br><span class="line">e.printStackTrace(); </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(value == <span class="keyword">null</span> || value.length() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">value = ESAPI.encoder().canonicalize(value);</span><br><span class="line"><span class="keyword">return</span> ESAPI.encoder().encodeForHTML(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] encode(String[] values)&#123;</span><br><span class="line"><span class="keyword">if</span>(values == <span class="keyword">null</span> || values.length == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len = values.length;</span><br><span class="line">String[] _values = <span class="keyword">new</span> String[len];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">_values[i] = encode(values[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _values;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">clean</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line">AntiSamy antiSamy = <span class="keyword">new</span> AntiSamy(); </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line"><span class="keyword">final</span> CleanResults cr = antiSamy.scan(value, policy); </span><br><span class="line"><span class="keyword">return</span> cr.getCleanHTML(); </span><br><span class="line">&#125; <span class="keyword">catch</span> (ScanException | PolicyException e) &#123; </span><br><span class="line">logger.error(<span class="string">"invoke xss clean error"</span>, e);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] clean(String[] values)&#123;</span><br><span class="line"><span class="keyword">if</span>(values == <span class="keyword">null</span> || values.length == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len = values.length;</span><br><span class="line">String[] _values = <span class="keyword">new</span> String[len];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">_values[i] = clean(values[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _values;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用filter处理HttpServletRequest，依次编写以下代码</p><ol><li><p>自定义HttpServletRequestWrapper</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sw.busi.utils.XssUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssCleanHttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">XssCleanHttpServletRequestWrapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getQueryString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String value = <span class="keyword">super</span>.getQueryString();</span><br><span class="line"><span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">value = XssUtils.clean(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 覆盖getParameter方法，将参数名和参数值都做xss过滤。&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * 如果需要获得原始的值，则通过super.getParameterValues(name)来获取&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * getParameterNames,getParameterValues和getParameterMap也可能需要覆盖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">String value = <span class="keyword">super</span>.getParameter(XssUtils.clean(name));</span><br><span class="line"><span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">value = XssUtils.clean(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">String[]parameters=<span class="keyword">super</span>.getParameterValues(name);</span><br><span class="line"><span class="keyword">if</span> (parameters==<span class="keyword">null</span>||parameters.length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">parameters[i] = XssUtils.clean(parameters[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> parameters;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, String[]&gt; getParameterMap() &#123;</span><br><span class="line">Map&lt;String, String[]&gt; params = <span class="keyword">super</span>.getParameterMap();</span><br><span class="line"><span class="keyword">if</span> (params==<span class="keyword">null</span> || params.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> capacity = (<span class="keyword">int</span>) ((<span class="keyword">float</span>) params.size() / <span class="number">0.75F</span> + <span class="number">1.0F</span>);</span><br><span class="line">Map&lt;String, String[]&gt; _params = <span class="keyword">new</span> HashMap&lt;String, String[]&gt;(capacity);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String[]&gt; e : params.entrySet()) &#123;</span><br><span class="line">String key = e.getKey();</span><br><span class="line">String[] values = e.getValue();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">values[i] = XssUtils.clean(values[i]);</span><br><span class="line">&#125;</span><br><span class="line">_params.put(key, values);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 覆盖getHeader方法，将参数名和参数值都做xss过滤。&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * 如果需要获得原始的值，则通过super.getHeaders(name)来获取&lt;br/&gt; getHeaderNames 也可能需要覆盖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String value = <span class="keyword">super</span>.getHeader(XssUtils.clean(name));</span><br><span class="line"><span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">value = XssUtils.clean(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义filter</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> FilterConfig filterConfig = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.filterConfig = filterConfig;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.filterConfig = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">chain.doFilter(<span class="keyword">new</span> XssCleanHttpServletRequestWrapper((HttpServletRequest) request), response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>若使用spring mvc，且使用了@RequestBody的方式绑定参数（spring内部封装了httpservletrequest的装配器，使用了getInputStream的方式获取请求体，并转换为对应的实体），通过filter的方式就无法满足了，笔者对spring mvc的序列化与反序列化进行了修改，这里以jackson为示例，编写代码。</p><ol><li>为MappingJackson2HttpMessageConverter的objectMapper注入自定义的实例对象</li><li><p>编写自定义ObjectMapper的实现</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.sw.busi.json.jackson.databind.deser.StringDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.sw.busi.json.jackson.databind.ser.StringSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomObjectMapper</span> <span class="keyword">extends</span> <span class="title">ObjectMapper</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8543006375974774016L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomObjectMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">SimpleModule simpleModule = <span class="keyword">new</span> SimpleModule();</span><br><span class="line"><span class="comment">//序列化与反序列化字符串，使用了xss clean</span></span><br><span class="line">simpleModule.addSerializer(String.class, StringSerializer.instance);</span><br><span class="line">simpleModule.addDeserializer(String.class, StringDeserializer.instance);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.registerModule(simpleModule);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写自定义StringSerializer  </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonMappingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase;</span><br><span class="line"><span class="keyword">import</span> com.sw.busi.utils.XssUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is the special serializer for regular &#123;<span class="doctag">@link</span> java.lang.String&#125;s.</span></span><br><span class="line"><span class="comment"> *&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Since this is one of "native" types, no type information is ever</span></span><br><span class="line"><span class="comment"> * included on serialization (unlike for most scalar types as of 1.5)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringSerializer</span> <span class="keyword">extends</span> <span class="title">NonTypedScalarSerializerBase</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> StringSerializer instance = <span class="keyword">new</span> StringSerializer();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(String.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * For Strings, both null and Empty String qualify for emptiness.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (value == <span class="keyword">null</span>) || (value.length() == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(SerializerProvider prov, String value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (value == <span class="keyword">null</span>) || (value.length() == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(String value, JsonGenerator jgen, SerializerProvider provider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">jgen.writeString(XssUtils.clean(value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonNode <span class="title">getSchema</span><span class="params">(SerializerProvider provider, Type typeHint)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> createSchemaNode(<span class="string">"string"</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acceptJsonFormatVisitor</span><span class="params">(JsonFormatVisitorWrapper visitor, JavaType typeHint)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> JsonMappingException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (visitor != <span class="keyword">null</span>)</span><br><span class="line">visitor.expectStringFormat(typeHint);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写StringDeserializer</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.Base64Variants;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonParser;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonToken;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationContext;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.jsontype.TypeDeserializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sw.busi.utils.XssUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去掉注解，防止自定义反序列化器被认为是标准实现，从而反序列化String[] collection&lt;String&gt; Map&lt;*, String&gt; 无效</span></span><br><span class="line"><span class="comment">// com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(Object)</span></span><br><span class="line"><span class="comment">//@JacksonStdImpl</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDeserializer</span> <span class="keyword">extends</span> <span class="title">StdScalarDeserializer</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> StringDeserializer instance = <span class="keyword">new</span> StringDeserializer();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringDeserializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(String.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// since 2.6, slightly faster lookups for this very common type</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCachable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(JsonParser jp, DeserializationContext ctxt)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">JsonToken curr = jp.getCurrentToken();</span><br><span class="line"><span class="keyword">if</span> (curr == JsonToken.VALUE_STRING) &#123;</span><br><span class="line"><span class="keyword">return</span> XssUtils.clean(jp.getText());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Issue#381</span></span><br><span class="line"><span class="keyword">if</span> (curr == JsonToken.START_ARRAY &amp;&amp; ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) &#123;</span><br><span class="line">jp.nextToken();</span><br><span class="line"><span class="keyword">final</span> String parsed = _parseString(jp, ctxt);</span><br><span class="line"><span class="keyword">if</span> (jp.nextToken() != JsonToken.END_ARRAY) &#123;</span><br><span class="line"><span class="keyword">throw</span> ctxt.wrongTokenException(jp, JsonToken.END_ARRAY,</span><br><span class="line"><span class="string">"Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> XssUtils.clean(parsed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [JACKSON-330]: need to gracefully handle byte[] data, as base64</span></span><br><span class="line"><span class="keyword">if</span> (curr == JsonToken.VALUE_EMBEDDED_OBJECT) &#123;</span><br><span class="line">Object ob = jp.getEmbeddedObject();</span><br><span class="line"><span class="keyword">if</span> (ob == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ob <span class="keyword">instanceof</span> <span class="keyword">byte</span>[]) &#123;</span><br><span class="line"><span class="keyword">return</span> XssUtils.clean(Base64Variants.getDefaultVariant().encode((<span class="keyword">byte</span>[]) ob, <span class="keyword">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// otherwise, try conversion using toString()...</span></span><br><span class="line"><span class="keyword">return</span> XssUtils.clean(ob.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// allow coercions for other scalar types</span></span><br><span class="line">String text = jp.getValueAsString();</span><br><span class="line"><span class="keyword">if</span> (text != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> XssUtils.clean(text);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ctxt.mappingException(_valueClass, curr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Since we can never have type info ("natural type"; String, Boolean,</span></span><br><span class="line"><span class="comment">// Integer, Double):</span></span><br><span class="line"><span class="comment">// (is it an error to even call this version?)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deserializeWithType</span><span class="params">(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> deserialize(p, ctxt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java中处理xss的方式有多种，一般使用html entity转义，校验输入，清理有危害代码片段等方法。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;转义字符串长度会发生变化，可能影响到持久化操作。如果页面中不允许编辑富文本，可以采用此方式；相反，这种方式会影响html展示。&lt;/li&gt;
&lt;li&gt;校验输入可以在数据提交前防止用户添加特殊字符，但不是主要防御方法，只是有助于减少xss漏洞。&lt;/li&gt;
&lt;li&gt;清理是一种强有力的防御措施，清除可能有害的标记，将不可接受的用户输入更改为可接受的格式，以确保接收到的数据不会对用户以及数据库造成损害。在允许使用html的站点上，这种方式效果较好。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://blog.theclouds.top/categories/Java/"/>
    
    
      <category term="java" scheme="https://blog.theclouds.top/tags/java/"/>
    
      <category term="xss" scheme="https://blog.theclouds.top/tags/xss/"/>
    
      <category term="antisamy" scheme="https://blog.theclouds.top/tags/antisamy/"/>
    
  </entry>
  
  <entry>
    <title>在Java中使用xsd校验xml</title>
    <link href="https://blog.theclouds.top/articles/use-schema-validate-xml-document-in-java/"/>
    <id>https://blog.theclouds.top/articles/use-schema-validate-xml-document-in-java/</id>
    <published>2017-04-17T09:00:33.000Z</published>
    <updated>2017-04-17T09:00:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目需要使用xsd对xml进行预校验，于是封装了一个工具类，来完成校验工作。<a id="more"></a><br>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.StringReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.XMLConstants;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.stream.StreamSource;</span><br><span class="line"><span class="keyword">import</span> javax.xml.validation.Schema;</span><br><span class="line"><span class="keyword">import</span> javax.xml.validation.SchemaFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.validation.Validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.xml.sax.ErrorHandler;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXParseException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiSchemaValidator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//private static final Logger logger = LoggerFactory.getLogger(MultiSchemaValidator.class);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.setProperty(<span class="string">"jdk.xml.maxOccurLimit"</span>, <span class="string">"9999"</span>);    <span class="comment">//默认的maxOccur为5000，而我们项目中要求9999</span></span><br><span class="line">Locale.setDefault(Locale.CHINA);    <span class="comment">//如果项目不考虑国际化的话</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;SAXParseException&gt; <span class="title">validateXMLSchema</span><span class="params">(String xsdPath, String xml)</span></span>&#123;</span><br><span class="line"><span class="keyword">final</span> List&lt;SAXParseException&gt; errors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SchemaFactory factory = </span><br><span class="line">                    SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);</span><br><span class="line">            String path = Thread.currentThread().getContextClassLoader().getResource(<span class="string">""</span>).getPath();</span><br><span class="line">            Schema schema = factory.newSchema(<span class="keyword">new</span> File(path + xsdPath));</span><br><span class="line">            Validator validator = schema.newValidator();</span><br><span class="line">            validator.setErrorHandler(<span class="keyword">new</span> ErrorHandler() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line"><span class="comment">//logger.debug("warning ex", exception);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fatalError</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line"><span class="comment">//logger.debug("fatalError ex", exception);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line"><span class="comment">//logger.debug("error ex", exception);</span></span><br><span class="line">errors.add(exception);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">            validator.validate(<span class="keyword">new</span> StreamSource(<span class="keyword">new</span> StringReader(xml)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | SAXException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Exception: "</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> errors;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String schemaURI = <span class="string">"xsd/Manifest.xsd"</span>;</span><br><span class="line">        String xml = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;SAXParseException&gt; errors = validateXMLSchema(schemaURI, xml);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(SAXParseException ex : errors)&#123;</span><br><span class="line">System.out.println(ex.getLineNumber() + <span class="string">"行,"</span> + ex.getColumnNumber() + <span class="string">"列,"</span> + ex.getMessage());</span><br><span class="line">&#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该代码应该可以完成一般需求。不过需要注意以下问题：</p><ol><li>xsd中使用<code>&lt;xs:import&gt;</code> <code>&lt;xs:include&gt;</code> 引入其他xsd文件时，不要将xsd打包到jar中，这种方式不支持jar!的方式访问import文件。</li><li>jdk有xml-apis及其实现，但是尝试覆盖其<code>XMLSchemaMessages.properties</code>以便自定义提示语句时出现问题，便引用了 <code>xml-apis</code> 及 <code>xercesImpl</code>,覆盖了<code>org.apache.xerces.impl.msg</code>包下的properties文件。</li><li>上述代码可以完成多schema文件的校验，需保证xsd都在相同路径。若不在同一位置，可参考链接中博客的方式，实现<a href="http://blog.csdn.net/hld_hepeng/article/details/6318663" target="_blank" rel="noopener">SchemaFactory解析shcema</a>的处理操作。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目需要使用xsd对xml进行预校验，于是封装了一个工具类，来完成校验工作。
    
    </summary>
    
    
      <category term="Java" scheme="https://blog.theclouds.top/categories/Java/"/>
    
    
      <category term="java" scheme="https://blog.theclouds.top/tags/java/"/>
    
      <category term="xsd" scheme="https://blog.theclouds.top/tags/xsd/"/>
    
  </entry>
  
  <entry>
    <title>tomcat下各日志文件的说明</title>
    <link href="https://blog.theclouds.top/articles/the-log-files-of-tomcat/"/>
    <id>https://blog.theclouds.top/articles/the-log-files-of-tomcat/</id>
    <published>2017-04-15T09:00:37.000Z</published>
    <updated>2017-04-15T09:00:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;今天同事在使用tomcat发布项目的时候，遇到个问题，导致项目一直无法启动，查看tomcat控制台输出，发现启动日志仅有一句描述：<code>严重: One or more listeners failed to start. Full details will be found in the appropriate container log file</code>，第一时间认为是spring容器初始化失败，那么把spring加载配置文件及初始化的日志级别调整为debug不就万事大吉了么。<a id="more"></a><br>&emsp;&emsp;然并卵，日志输出中还是仅有那一句描述，使用tomcat-manager卸载-发布-卸载-发布多个循环，仍无果。<br>&emsp;&emsp;仔细思考想想，最近查问题都是使用catalina.out以及项目日志来排查，tomcat的其他日志中是不是藏有猫腻。<br>&emsp;&emsp;最终在<code>localhost.*.log</code>中发现了问题，项目中spring容器扫描package时加载了不同包名但类名相同的bean，导致初始化监听器失败，可是为什么应用的日志组件已经启动，为什么没有报呢？还是翻翻spring、tomcat的源码瞧个仔细吧。<br>经查阅，spring中contextloadlistener中的异常都是抛出到web容器的，由容器来进行处理，那么就可以定位到tomcat中<a href="http://svn.apache.org/repos/asf/tomcat/tc8.5.x/trunk/java/org/apache/catalina/core/StandardContext.java" target="_blank" rel="noopener">standardcontext中初始化listener的位置</a>，摘录如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; instances.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(instances[i] <span class="keyword">instanceof</span> ServletContextListener))</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    ServletContextListener listener =</span><br><span class="line">        (ServletContextListener) instances[i];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fireContainerEvent(<span class="string">"beforeContextInitialized"</span>, listener);</span><br><span class="line">        <span class="keyword">if</span> (noPluggabilityListeners.contains(listener)) &#123;</span><br><span class="line">            listener.contextInitialized(tldEvent);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            listener.contextInitialized(event);</span><br><span class="line">        &#125;</span><br><span class="line">        fireContainerEvent(<span class="string">"afterContextInitialized"</span>, listener);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        fireContainerEvent(<span class="string">"afterContextInitialized"</span>, listener);</span><br><span class="line">        getLogger().error</span><br><span class="line">            (sm.getString(<span class="string">"standardContext.listenerStart"</span>, instances[i].getClass().getName()), t);</span><br><span class="line">        ok = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;好吧，如此可知道日志是通过standardcontext的父类ContainerBase来输出的，顺便瞅一眼tomcat的日志配置，默认为<code>conf/logging.properties</code>，看到该类的日志被输出到location.*.log中，与文首场景中对应上了。<br>&emsp;&emsp;这么简单的问题查了小半天，惆怅。<br>&emsp;&emsp;tomcat的相关文档中提示：调用<code>javax.servlet.ServletContext.log(...)</code>输出日志会被tomcat内部日志组件处理，按照日志配置文件中<code>org.apache.catalina.core.ContainerBase.[${engine}].[${host}].[${context}]</code> 的形式被分类记录，那我们顺便了解下tomcat默认的日志配置吧。</p><blockquote><p>1catalina.org.apache.juli.FileHandler.level = FINE<br>1catalina.org.apache.juli.FileHandler.directory = ${catalina.base}/logs<br>1catalina.org.apache.juli.FileHandler.prefix = catalina.</p><p>2localhost.org.apache.juli.FileHandler.level = FINE<br>2localhost.org.apache.juli.FileHandler.directory = ${catalina.base}/logs<br>2localhost.org.apache.juli.FileHandler.prefix = localhost.</p><p>3manager.org.apache.juli.FileHandler.level = FINE<br>3manager.org.apache.juli.FileHandler.directory = ${catalina.base}/logs<br>3manager.org.apache.juli.FileHandler.prefix = manager.</p><p>4host-manager.org.apache.juli.FileHandler.level = FINE<br>4host-manager.org.apache.juli.FileHandler.directory = ${catalina.base}/logs<br>4host-manager.org.apache.juli.FileHandler.prefix = host-manager.</p></blockquote><p>&emsp;&emsp;另外，在<code>conf/server.xml</code>中我们可以开启请求记录日志，那么可以输出五个文件：<br>1.catalina.yyyy-MM-dd.log  Cataline引擎的日志文件，记录启动的JVM参数以及操作系统等信息<br>2.localhost.yyyy-MM-dd.log  tomcat中名为localhost的host日志输出，记录host初始化的日志<br>3.localhost_access_log.yyyy-MM-dd.txt  记录localhost下各应用的请求<br>4.host-manager.yyyy-MM-dd.log  记录localhost下<a href="http://tomcat.apache.org/tomcat-8.5-doc/host-manager-howto.html" target="_blank" rel="noopener">host-manager</a>的应用日志<br>5.manager.yyyy-MM-dd.log  记录localhost下<a href="http://tomcat.apache.org/tomcat-8.5-doc/manager-howto.html" target="_blank" rel="noopener">manager</a>的应用日志</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;今天同事在使用tomcat发布项目的时候，遇到个问题，导致项目一直无法启动，查看tomcat控制台输出，发现启动日志仅有一句描述：&lt;code&gt;严重: One or more listeners failed to start. Full details will be found in the appropriate container log file&lt;/code&gt;，第一时间认为是spring容器初始化失败，那么把spring加载配置文件及初始化的日志级别调整为debug不就万事大吉了么。
    
    </summary>
    
    
      <category term="Tomcat" scheme="https://blog.theclouds.top/categories/Tomcat/"/>
    
    
      <category term="java" scheme="https://blog.theclouds.top/tags/java/"/>
    
      <category term="tomcat" scheme="https://blog.theclouds.top/tags/tomcat/"/>
    
      <category term="spring" scheme="https://blog.theclouds.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>在linux中使用源码安装httpd服务器</title>
    <link href="https://blog.theclouds.top/articles/how-to-install-httpd-on-linux/"/>
    <id>https://blog.theclouds.top/articles/how-to-install-httpd-on-linux/</id>
    <published>2017-03-08T03:21:10.000Z</published>
    <updated>2017-03-08T03:21:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>前天在Centos中安装了Apache的httpd，安装的机器在公司内网，于是选择了源码进行安装。俗话说好记性不如烂笔头，现将安装过程进行记录，也希望能帮到各位网友。<a id="more"></a></p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>因公司机器已经安装c++编译相关，该工作不再赘述，如无法使用make相关命令，请自行安装g++、libc等库。</p><ol><li><p>笔者写这篇博文时选中的版本是<a href="http://mirrors.tuna.tsinghua.edu.cn/apache/httpd/httpd-2.4.23.tar.gz" target="_blank" rel="noopener">httpd-2.4.23.tar.gz</a></p></li><li><p>Apache Portable Runtime（APR），为上层的应用程序提供一个可以跨平台使用的底层支持接口库。笔者选定的版本仍为官网最新版本<a href="http://mirrors.tuna.tsinghua.edu.cn/apache/apr/apr-1.5.2.tar.gz" target="_blank" rel="noopener">apr-1.5.2.tar.gz</a></p></li><li><p><a href="http://mirrors.hust.edu.cn/apache/apr/apr-util-1.5.4.tar.gz" target="_blank" rel="noopener">apr-util-1.5.4.tar.gz</a></p></li><li><p>pcre，该模块主要为httpd提供了rewrite功能，笔者选定了<a href="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz" target="_blank" rel="noopener">pcre-8.38.tar.gz</a></p></li><li><p><a href="http://invisible-mirror.net/archives/lynx/tarballs/lynx2.8.8rel.2.tar.gz" target="_blank" rel="noopener">lynx</a>及其依赖<a href="http://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.0.tar.gz" target="_blank" rel="noopener">ncurses</a>，其中lynx是纯文本浏览器，httpd的执行status命令时会访问server-status，lynx用于解析html并输出文本信息，它依赖于ncurses，curses库是可以在Linux终端中写出字符用户界面，新的版本是ncurses库。不安装lynx及ncurses也可以，使用curl访问server-status链接即可。</p></li></ol><h4 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h4><p>分别使用tar -xvzf命令解压缩各tar.gz，笔者将各压缩包解压在/opt/downloads下，依次执行以下的安装命令。</p><ol><li><p>安装ncurses(不使用lynx请跳过)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/downloads/ncurses-6.0/</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/ncurses</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>安装lynx</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/downloads/lynx2-8-8/</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/lynx --with-curses-dir=/usr/<span class="built_in">local</span>/ncurses</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>安装apr</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/downloads/apr-1.5.2</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/apr</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>安装apr-util</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/downloads/apr-util-1.5.4</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/apr-util --with-apr=/usr/<span class="built_in">local</span>/apr</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>安装pcre</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/downloads/pcre-8.38</span><br><span class="line">./configure --with-apr=/usr/<span class="built_in">local</span>/pcre</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>安装httpd</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/downloads/httpd-2.4.23</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/apache2 --<span class="built_in">enable</span>-expires --<span class="built_in">enable</span>-headers --<span class="built_in">enable</span>-modules=most --<span class="built_in">enable</span>-so --with-mpm=worker --<span class="built_in">enable</span>-rewrite --with-apr=/usr/<span class="built_in">local</span>/apr --with-apr-util=/usr/<span class="built_in">local</span>/apr-util --with-pcre=/usr/<span class="built_in">local</span>/pcre</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li></ol><p>至此，httpd安装完毕。</p><blockquote><p>上面命令所使用到的<code>./configure</code>后的参数说明：（可执行<code>./configure --help</code>查看支持的参数，在执行./configure命令后，可使用<code>echo $?</code>查看是否有错误，返回0说明没问题，可继续执行make命令）</p><p><code>#--prefix=&lt;install_path&gt;</code> 指定便以后的二进制文件安装目录，若省略使用默认目录</p><p><code>#--with-xxx</code> 一般指定其加载的模块路径</p><p><code>--enable-module=so</code> 指明编译动态加载模块，使得apache的各模块与核心分开编译，运行时动态加载，最新版已缺省编译此模块</p><p><code>--enable-deflate</code> 支持网页压缩</p><p><code>--enable-expires</code> 通过配置文件控制HTTP的<code>“Expires:”</code>和<code>“Cache-Control:”</code>头内容，即对网站图片、js、css等内容，提供客户端浏览器缓存的设置</p><p><code>--enable-rewrite</code> 支持URL重写</p><p>以下为本次未使用的参数说明：</p><p><code>--enable-cache</code> 支持缓存</p><p><code>--enable-file-cache</code> 支持文件缓存</p><p><code>--enable-mem-cache</code> 支持记忆缓存</p><p><code>--enable-disk-cache</code> 支持磁盘缓存</p><p><code>--enable-static-support</code> 支持静态连接(默认为动态连接)</p><p><code>--enable-static-htpasswd</code> 使用静态连接编译 htpasswd - 管理用于基本认证的用户文件</p><p><code>--enable-static-htdigest</code> 使用静态连接编译 htdigest - 管理用于摘要认证的用户文件 </p><p><code>--enable-static-rotatelogs</code> 使用静态连接编译 rotatelogs - 滚动 Apache 日志的管道日志程序 </p><p><code>--enable-static-logresolve</code> 使用静态连接编译 logresolve - 解析 Apache 日志中的IP地址为主机名</p><p><code>--enable-static-htdbm</code> 使用静态连接编译 htdbm - 操作 DBM 密码数据库 </p><p><code>--enable-static-ab</code> 使用静态连接编译 ab - Apache HTTP 服务器性能测试工具</p><p><code>--enable-static-checkgid</code> 使用静态连接编译 checkgid </p><p><code>--disable-cgid</code> 禁止用一个外部 CGI 守护进程执行CGI脚本</p><p><code>--disable-cgi</code> 禁止编译 CGI 版本的 PHP</p><p><code>--disable-userdir</code> 禁止用户从自己的主目录中提供页面</p></blockquote><h4 id="配置httpd"><a href="#配置httpd" class="headerlink" title="配置httpd"></a>配置httpd</h4><ol><li><p>修改httpd.conf文件</p><blockquote><p>去除<code>ServerName</code>的注释，并修改设置其值，如<code>localhost:80</code><br>若要开启server-status监控httpd的运行状态，需在httpd.conf中打开对httpd-info.conf的引用，并修改http-info.conf的相关配置，参照如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Location /server-status&gt;</span><br><span class="line">    Order Deny,Allow</span><br><span class="line">    Deny from all</span><br><span class="line">    Allow from 127.0.0.1        </span><br><span class="line">&lt;/Location&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>使用一下命令注册httpd为service</p><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/apache2/bin/apachectl /etc/init.d/httpd</span><br></pre></td></tr></table></figure></blockquote></li></ol><p>编辑/etc/init.d/httpd文件，在注释的顶部添加chkconfig的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># chkconfig:2345 90 90</span><br><span class="line"># description:Apache</span><br></pre></td></tr></table></figure></p><p>并为该文件添加可执行的权限<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/init.d/httpd</span><br></pre></td></tr></table></figure></p><p>添加httpd为服务<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --add httpd</span><br></pre></td></tr></table></figure></p><blockquote><p>现在可以使用<code>service httpd start|stop|status</code>等命令操作了</p></blockquote><p>Just enjoy it！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前天在Centos中安装了Apache的httpd，安装的机器在公司内网，于是选择了源码进行安装。俗话说好记性不如烂笔头，现将安装过程进行记录，也希望能帮到各位网友。
    
    </summary>
    
    
      <category term="Linux" scheme="https://blog.theclouds.top/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://blog.theclouds.top/tags/linux/"/>
    
      <category term="httpd" scheme="https://blog.theclouds.top/tags/httpd/"/>
    
  </entry>
  
</feed>
